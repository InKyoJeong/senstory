{"version":3,"file":"static/chunks/pages/hashtag/[tag]-c6fb5220503552c32de0.js","mappings":"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","sources":["webpack://_N_E/./pages/hashtag/[tag].tsx","webpack://_N_E/?1572","webpack://_N_E/./node_modules/react-intersection-observer/react-intersection-observer.m.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport { useRouter } from 'next/router';\nimport { useInView } from 'react-intersection-observer';\nimport axios from 'axios';\nimport wrapper from '../../store/configureStore';\n\nimport PostCard from '../../components/post/PostCard';\nimport Layout from '../../components/common/Layout';\nimport { loadHashtagPostsRequest } from '../../reducers/post/loadHashtagPosts';\nimport { loadMeRequest } from '../../reducers/user/loadMe';\nimport { randomUserRequest } from '../../reducers/user/randomUser';\nimport { RootState } from '../../reducers';\n\nconst Hashtag = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const { tag } = router.query;\n  const { mainPosts, hasMorePosts, loadHashtagPostsLoading } = useSelector((state: RootState) => state.post);\n  const [ref, inView] = useInView();\n\n  useEffect(() => {\n    if (inView && hasMorePosts && !loadHashtagPostsLoading) {\n      const lastId = mainPosts[mainPosts.length - 1]?.id;\n\n      dispatch(loadHashtagPostsRequest(tag as string, lastId));\n    }\n  }, [inView, hasMorePosts, loadHashtagPostsLoading, mainPosts, tag]);\n\n  return (\n    <Layout>\n      {mainPosts.map((c) => (\n        <PostCard key={c.id} post={c} ref={hasMorePosts && !loadHashtagPostsLoading ? ref : undefined} />\n      ))}\n    </Layout>\n  );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps((store): any => async ({ req, params }: any) => {\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  store.dispatch(loadHashtagPostsRequest(params.tag));\n  store.dispatch(loadMeRequest());\n  store.dispatch(randomUserRequest());\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\n\nexport default Hashtag;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/hashtag/[tag]\",\n      function () {\n        return require(\"private-next-pages/hashtag/[tag].tsx\");\n      }\n    ]);\n  ","import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ObserverMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        tag = _this$props2.tag,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView;\n\n  var unobserve = useRef();\n\n  var _React$useState = useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport default InView;\nexport { InView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n"],"names":["dispatch","useDispatch","tag","useRouter","query","useSelector","state","post","mainPosts","hasMorePosts","loadHashtagPostsLoading","useInView","ref","inView","useEffect","lastId","length","id","loadHashtagPostsRequest","map","c","undefined","window","__NEXT_P","push","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","ObserverMap","Map","RootIds","WeakMap","rootId","optionsToId","options","keys","sort","filter","root","has","set","toString","get","observe","element","callback","_createObserver","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","splice","indexOf","unobserve","size","disconnect","isPlainChildren","props","children","InView","_React$Component","subClass","superClass","_this","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","create","constructor","__proto__","_proto","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","_this$props2","as","excluded","sourceKeys","_objectWithoutPropertiesLoose","createElement","Component","_temp","_ref","useRef","_React$useState","useState","setRef","useCallback","current","result","displayName","defaultProps"],"sourceRoot":""}